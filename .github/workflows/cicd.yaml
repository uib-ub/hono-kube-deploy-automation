name: CICD

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

  pull_request:
    types: [synchronize]
    branches:
      - main # Trigger on PRs targeting main only
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          golangci-lint --version

      - name: Run golangci-lint
        run: golangci-lint run ./...  -v --timeout 5m

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: |
        go mod tidy
        go mod download

    - name: Run tests
      env:
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
        ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
        LOCAL_REPO_SRC: ${{ runner.temp }}/app
      run: |
        go test -v -race -coverprofile=coverage.out ./internal/client/
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 7  # Keep artifacts for 14 days

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.out
        flags: unittests
        name: code-coverage-report
        fail_ci_if_error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-secrets:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: github-kube-secrets
    steps:
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v3
      - name: Setup kubectl
        env:
          MICROK8S_CONFIG: ${{ secrets.MICROK8S_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "${MICROK8S_CONFIG}" | base64 --decode > $HOME/.kube/config
      - name: Check kubectl get node
        run: kubectl get nodes -o wide
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: deploy Kubernetes secrets to hono api dev environment
        env:
          REGISTRY: ghcr.io
        run: |
          function manage_kube_secret {
            local secret_name=$1
            local secret_key=$2
            local secret_value=$3
            local secret_type=${4:-generic}

            if [ "$secret_name" == "github-deploy-regcred" ]; then
              # Special handling for Github container registry secret
              if ! kubectl get secret "$secret_name"; then
                echo "Creating Github container registry secret $secret_name..."
                kubectl create secret "$secret_type" "$secret_name" \
                  --docker-username=${{ github.actor }} \
                  --docker-password="$secret_value" \
                  --docker-server=${{ env.REGISTRY }}
              else
                echo "Checking if Github container registry secret $secret_name needs to be updated..."
                existing_pass=$(kubectl get secret "$secret_name" --template='{{index .data ".dockerconfigjson" | base64decode}}' | jq -r '.auths["ghcr.io"].password')
                if [[ "$existing_pass" != "$secret_value" ]]; then
                  echo "Updating Github registry secret $secret_name..."
                  kubectl delete secret "$secret_name"
                  kubectl create secret "$secret_type" "$secret_name" \
                    --docker-username=${{ github.actor }} \
                    --docker-password="$secret_value" \
                    --docker-server=${{ env.REGISTRY }}
                else
                  echo "Github container registry secret $secret_name is up-to-date, no action required."
                fi
              fi
            else
              # General handling for other secrets using passed parameters
              if ! kubectl get secret "$secret_name"; then
                echo "Creating secret $secret_name..."
                kubectl create secret "$secret_type" "$secret_name" --from-literal="$secret_key"="$secret_value"
              else
                echo "Checking if secret $secret_name needs to be updated..."
                existing_value=$(kubectl get secret "$secret_name" --template="{{index .data \"$secret_key\" | base64decode}}")
                if [[ "$existing_value" != "$secret_value" ]]; then
                  echo "Updating secret $secret_name..."
                  kubectl delete secret "$secret_name"
                  kubectl create secret "$secret_type" "$secret_name" --from-literal="$secret_key"="$secret_value"
                else
                  echo "Secret $secret_name is up-to-date, no action required."
                fi
              fi
            fi
          }

          # Handle secrets using the generic function
          manage_kube_secret "github-deploy-regcred" ".dockerconfigjson" "${{ secrets.GHCR_PAT }}" "docker-registry"
          manage_kube_secret "webhook-cred" "webhook-secret" "${{ secrets.WEBHOOK_SECRET }}"
          manage_kube_secret "github-cred" "github-token" "${{ secrets.GHCR_PAT }}"
          manage_kube_secret "rollbar-cred" "rollbar-token" "${{ secrets.ROLLBAR_TOKEN }}"

  deploy-app:
    needs: deploy-secrets
    runs-on: ubuntu-latest
    environment:
      name: github-kube-deploy
    steps: 
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v3

      - name: Setup kubectl
        env:
          MICROK8S_CONFIG: ${{ secrets.MICROK8S_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "${MICROK8S_CONFIG}" | base64 --decode > $HOME/.kube/config

      - name: Check kubectl get node
        run: kubectl get nodes -o wide

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch the last two commits

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Notify start deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.1
        id: rollbar_pre_deploy
        with:
          environment: 'production'
          version: 'latest'
          status: 'started'
          local_username: ${{ secrets.ROLLBAR_LOCAL_USERNAME }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}

      - name: Check for changes in deployment or source code
        run: |
          if git diff --name-only HEAD^ HEAD | grep '^deployment/'; then
            echo "deployment_changes=true" >> $GITHUB_ENV
          else
            echo "deployment_changes=false" >> $GITHUB_ENV
          fi
          
          # Check if source code files have changed (cmd/, internal/, Dockerfile, go.mod, go.sum)
          if git diff --name-only HEAD^ HEAD | grep -E '^(cmd/|internal/|Dockerfile|go.mod|go.sum)'; then
            echo "source_changes=true" >> $GITHUB_ENV
          else
            echo "source_changes=false" >> $GITHUB_ENV
          fi

      # Apply deployment configuration if deployment files changed
      - name: Apply deployment configuration if changed
        if: env.deployment_changes == 'true'
        run: |
          echo "Applying deployment configuration..."
          kubectl apply -f deployment/deploy.yaml

      # Always refresh deployment if source code changed
      - name: Force Kubernetes to pull latest image if source code changed
        if: env.source_changes == 'true'
        run: |
          DEPLOYMENT_NAME="github-deploy-hono"
          NAMESPACE="default"
          echo "Forcing Kubernetes to pull the latest image..."
          kubectl patch deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" \
            -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"kubectl.kubernetes.io/restartedAt\":\"$(date +%s)\"}}}}}"

#      - name: deploy application to kubernetes on NREC
#        run: |
#          DEPLOYMENT_NAME="github-deploy-hono"
#          NAMESPACE="default"
#          # Check if the deployment already exists
#          if kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
#            echo "Deployment $DEPLOYMENT_NAME already exists. Performing rolling restart..."
#            kubectl rollout restart deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE"
#          else
#            echo "Deployment $DEPLOYMENT_NAME does not exist. Applying deployment..."
#            kubectl apply -f deployment/deploy.yaml
#          fi
      
      - name: Notify finish deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.1
        id: rollbar_post_deploy
        with:
          environment: 'production'
          version: 'latest'
          status: 'succeeded'
          local_username: ${{ secrets.ROLLBAR_LOCAL_USERNAME }}
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
          DEPLOY_ID: ${{ steps.rollbar_pre_deploy.outputs.deploy_id }}