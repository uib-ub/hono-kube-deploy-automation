name: Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

  pull_request:
    branches:
      - main # Trigger on PRs targeting main only
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: |
        go mod tidy
        go mod download

    - name: Run tests
      env:
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
        ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
        LOCAL_REPO_SRC: ${{ runner.temp }}/app
      run: |
        go test -v -race -coverprofile=coverage.out ./internal/client/
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.out
        flags: unittests
        name: code-coverage-report
        fail_ci_if_error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max